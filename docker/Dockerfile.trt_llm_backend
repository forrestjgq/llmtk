ARG BASE_IMAGE=""
ARG BASE_TAG=""

FROM ${BASE_IMAGE}:${BASE_TAG} as base

# setup proxy and git ids
ARG proxy_val=""
ARG LLMTK_COMMITID=""
ARG TRTLLM_COMMITID=""
ARG BACKEND_COMMITID=""
ARG IMAGE=""
ARG BASE_URL=""

ENV http_proxy=$proxy_val
ENV https_proxy=$proxy_val
ENV TRITON_BASE_IMAGE=${BASE_URL}
ENV TRITON_IMAGE=${IMAGE}
ENV TRITON_LLMTK_COMMITID=$LLMTK_COMMITID
ENV TRITON_TRTLLM_COMMITID=$TRTLLM_COMMITID
ENV TRITON_BACKEND_COMMITID=$BACKEND_COMMITID


FROM base as dgtrt_builder
WORKDIR /app
COPY dgtrt dgtrt
RUN cd /app/dgtrt && rm -rf /app/dgtrt/build && mkdir -p /app/dgtrt/build && cd /app/dgtrt/build && cmake -Dpybind11_DIR=/usr/local/lib/python3.10/dist-packages/pybind11/share/cmake/pybind11 .. && make install-python-package && cd /app && rm -rf dgtrt
ENV LD_LIBRARY_PATH=/usr/local/lib/python3.10/dist-packages/dgtrt:${LD_LIBRARY_PATH}

FROM dgtrt_builder as trt_llm_builder

WORKDIR /app
COPY trtllm tensorrt_llm
RUN cd /app/tensorrt_llm && python3 scripts/build_wheel.py --trt_root="${TRT_ROOT}" -i -c && cd ..

FROM trt_llm_builder as trt_llm_backend_builder

WORKDIR /app/
COPY backend/inflight_batcher_llm inflight_batcher_llm
RUN cd inflight_batcher_llm && bash scripts/build.sh && cd ..

FROM trt_llm_backend_builder as final

# Install TensorRT-LLM
WORKDIR /app/
COPY --from=trt_llm_builder /app/tensorrt_llm/build /app/tensorrt_llm/build
RUN cd /app/tensorrt_llm/build && pip3 install *.whl

# Install tensorrtllm backend
RUN mkdir /opt/tritonserver/backends/tensorrtllm
COPY --from=trt_llm_backend_builder /app/inflight_batcher_llm/build/libtriton_tensorrtllm.so /opt/tritonserver/backends/tensorrtllm

ENV http_proxy=""
ENV https_proxy=""